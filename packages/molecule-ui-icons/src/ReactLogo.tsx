import * as React from 'react';
import cx from 'classnames';
import { throwPropError } from './helpers';
import Styles from './Style/Styles'

type Props = {
    fill?: string;
    size?: 'small' | 'normal' | 'large' | 'huge';
    customSize?: string;
    className?: string;
    onClick?: () => void;
};

const ReactLogo: React.FC<Props> = ({ fill, size = 'normal', customSize, className, onClick }) => {

    const sizeValues = ['small', 'normal', 'large', 'huge'];

    if (size && typeof size !== 'string') {
        throwPropError(
            'Value of props.size must be a string.'
        );
    }
    
    if (!size) throwPropError("Value of props.size can't be an empty string ");

    if (size) {
        if (sizeValues.indexOf(size) === -1)
            throwPropError(
                'Value of props.size must be any one of  "huge"  "large"  "normal"  "small". '
            );
    }

    if (fill && typeof fill !== 'string') {
        throwPropError('Value of props.fill must be a string');
    }

    if (fill && typeof fill === 'string') {
        if (!fill.match(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
            throwPropError('Value of props.fill must be a valid "HEXCODE".');
        }
    }

    if (customSize && typeof customSize !== 'string') {
        throwPropError('Value of props.customSize must be a string');
    }

    if (className && typeof className !== 'string') {
        throwPropError('Value of props.className must be a string');
    }

    let customStyles = {};

    if (customSize) {
        customStyles = {
            width: customSize,
            height: customSize,
        };
    }

    if (customSize && window.innerWidth < 600) {
        customStyles = {
            width: +customSize / 2,
            height: +customSize / 2,
        };
    }

    const onClickHandle = () => {
        onClick && onClick()
    }

    const componentStyles = Styles()

    const classes = cx(componentStyles[size], className);
    return (
        <svg
            onClick={onClickHandle}
            className={classes}
            style={customStyles}
            xmlns='http://www.w3.org/2000/svg'
            viewBox='0 0 24 24'>
            <path fillRule="evenodd" clipRule="evenodd" d="M7.49999 19.7942C7.33656 19.6999 7.13899 19.4801 7.0173 18.9694C6.89494 18.4559 6.87649 17.7423 7.00475 16.8521C7.06478 16.4355 7.15526 15.9916 7.27585 15.5264C8.04552 15.6917 8.87555 15.8179 9.74932 15.8983C10.2558 16.6148 10.7801 17.2705 11.3081 17.8544C10.9655 18.1915 10.6264 18.4918 10.2956 18.7521C9.58873 19.3083 8.96157 19.649 8.45564 19.7998C7.9525 19.9498 7.66343 19.8886 7.49999 19.7942ZM12 18.5765C10.0739 20.4682 8.18002 21.3415 6.99999 20.6603C5.81997 19.979 5.62937 17.9022 6.30454 15.2883C3.70323 14.566 2 13.3626 2 12C2 10.6374 3.70323 9.43398 6.30454 8.71173C5.62937 6.0978 5.81997 4.02103 6.99999 3.33974C8.18002 2.65846 10.0739 3.53178 12 5.42345C13.9261 3.53178 15.82 2.65846 17 3.33974C18.18 4.02103 18.3706 6.0978 17.6955 8.71173C20.2968 9.43398 22 10.6374 22 12C22 13.3626 20.2968 14.566 17.6955 15.2883C18.3706 17.9022 18.18 19.979 17 20.6603C15.82 21.3415 13.9261 20.4682 12 18.5765ZM16.7241 8.47361C16.8447 8.0084 16.9352 7.56454 16.9952 7.14788C17.1235 6.25765 17.105 5.54413 16.9827 5.03058C16.861 4.51985 16.6634 4.30013 16.5 4.20577C16.3366 4.11141 16.0475 4.05017 15.5443 4.20015C15.0384 4.35096 14.4113 4.69174 13.7044 5.24793C13.3736 5.50825 13.0345 5.80854 12.6919 6.14558C13.2199 6.72947 13.7442 7.38521 14.2507 8.10172C15.1244 8.18211 15.9545 8.30829 16.7241 8.47361ZM11.3081 6.14558C10.9655 5.80854 10.6264 5.50825 10.2956 5.24793C9.58873 4.69174 8.96157 4.35096 8.45564 4.20015C7.9525 4.05017 7.66343 4.11141 7.49999 4.20577C7.33656 4.30013 7.13899 4.51985 7.0173 5.03058C6.89494 5.54413 6.87649 6.25765 7.00475 7.14788C7.06478 7.56454 7.15526 8.0084 7.27585 8.47361C8.04552 8.30829 8.87555 8.18211 9.74932 8.10172C10.2558 7.38521 10.7801 6.72947 11.3081 6.14558ZM11.0522 8.01773C11.3657 7.60817 11.6829 7.22531 12 6.87165C12.3171 7.22531 12.6342 7.60817 12.9478 8.01773C12.6358 8.006 12.3197 8 12 8C11.6803 8 11.3642 8.006 11.0522 8.01773ZM9.02514 9.18806C8.51368 9.25481 8.02352 9.33808 7.55871 9.43583C7.70646 9.88723 7.87943 10.3534 8.07735 10.8297C8.22319 10.5536 8.37607 10.2768 8.53589 10C8.69572 9.72317 8.85899 9.45238 9.02514 9.18806ZM8.60497 12C8.84546 11.5051 9.1112 11.0035 9.40192 10.5C9.69263 9.99647 9.99412 9.51555 10.3025 9.05982C10.8513 9.02064 11.4186 9 12 9C12.5814 9 13.1487 9.02064 13.6975 9.05982C14.0059 9.51555 14.3074 9.99647 14.5981 10.5C14.8888 11.0035 15.1545 11.5051 15.395 12C15.1545 12.4949 14.8888 12.9965 14.5981 13.5C14.3074 14.0035 14.0059 14.4845 13.6975 14.9402C13.1487 14.9794 12.5814 15 12 15C11.4186 15 10.8513 14.9794 10.3025 14.9402C9.99412 14.4845 9.69263 14.0035 9.40192 13.5C9.1112 12.9965 8.84546 12.4949 8.60497 12ZM7.49865 12C7.13138 11.2031 6.82564 10.4212 6.58398 9.67197C6.1208 9.80015 5.69117 9.94371 5.30032 10.1C4.46523 10.4341 3.85653 10.8068 3.47296 11.1696C3.0915 11.5303 3 11.8113 3 12C3 12.1887 3.0915 12.4697 3.47296 12.8304C3.85653 13.1932 4.46523 13.5659 5.30032 13.9C5.69117 14.0563 6.1208 14.1999 6.58398 14.328C6.82564 13.5788 7.13138 12.7969 7.49865 12ZM7.55871 14.5642C7.70646 14.1128 7.87943 13.6466 8.07735 13.1703C8.22318 13.4464 8.37606 13.7232 8.53589 14C8.69572 14.2768 8.85899 14.5476 9.02514 14.8119C8.51368 14.7452 8.02352 14.6619 7.55871 14.5642ZM14.2507 15.8983C15.1244 15.8179 15.9545 15.6917 16.7241 15.5264C16.8447 15.9916 16.9352 16.4355 16.9952 16.8521C17.1235 17.7423 17.105 18.4559 16.9827 18.9694C16.861 19.4801 16.6634 19.6999 16.5 19.7942C16.3366 19.8886 16.0475 19.9498 15.5443 19.7998C15.0384 19.649 14.4113 19.3083 13.7044 18.7521C13.3736 18.4918 13.0345 18.1915 12.6919 17.8544C13.2199 17.2705 13.7442 16.6148 14.2507 15.8983ZM12.9478 15.9823C12.6342 16.3918 12.3171 16.7747 12 17.1283C11.6829 16.7747 11.3657 16.3918 11.0522 15.9823C11.3642 15.994 11.6803 16 12 16C12.3197 16 12.6358 15.994 12.9478 15.9823ZM14.9748 14.8119C15.141 14.5476 15.3043 14.2768 15.4641 14C15.6239 13.7232 15.7768 13.4464 15.9226 13.1703C16.1206 13.6466 16.2935 14.1128 16.4413 14.5642C15.9765 14.6619 15.4863 14.7452 14.9748 14.8119ZM16.5013 12C16.8686 12.7969 17.1743 13.5788 17.416 14.328C17.8792 14.1999 18.3088 14.0563 18.6997 13.9C19.5348 13.5659 20.1435 13.1932 20.527 12.8304C20.9085 12.4697 21 12.1887 21 12C21 11.8113 20.9085 11.5303 20.527 11.1696C20.1435 10.8068 19.5348 10.4341 18.6997 10.1C18.3088 9.94371 17.8792 9.80014 17.416 9.67197C17.1743 10.4212 16.8686 11.2031 16.5013 12ZM15.9226 10.8297C16.1206 10.3534 16.2935 9.88723 16.4413 9.43583C15.9765 9.33808 15.4863 9.25481 14.9748 9.18806C15.141 9.45238 15.3043 9.72317 15.4641 10C15.6239 10.2768 15.7768 10.5536 15.9226 10.8297ZM12 14C13.1046 14 14 13.1046 14 12C14 10.8954 13.1046 10 12 10C10.8954 10 10 10.8954 10 12C10 13.1046 10.8954 14 12 14Z" fill={fill} />
        </svg>
    );
};

export default ReactLogo;